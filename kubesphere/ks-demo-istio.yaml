---
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  annotations:
    servicemesh.kubesphere.io/enabled: 'true'
  # application 标签
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: v1
  name: nginx
  namespace: default
spec:
  addOwnerRef: true
  componentKinds:
  - group: ""
    kind: Service
  - group: apps
    kind: Deployment
  - group: apps
    kind: StatefulSet
  - group: networking.k8s.io
    kind: Ingress
  - group: servicemesh.kubesphere.io
    kind: Strategy
  - group: servicemesh.kubesphere.io
    kind: ServicePolicy
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
      app.kubernetes.io/version: v1
---
kind: Service
apiVersion: v1
metadata:
  annotations:
    kubesphere.io/serviceType: statelessservice
    servicemesh.kubesphere.io/enabled: 'true'
  labels:
    app: nginx
    # application 标签
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: v1
  name: nginx
  namespace: default
spec:
  ports:
    - name: http-80
      protocol: TCP
      port: 80
      targetPort: http-80
  selector:
    app: nginx
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: v1
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    servicemesh.kubesphere.io/enabled: 'true'
  labels:
    app: nginx
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: v1
    version: v1
  name: nginx-v1
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
      app.kubernetes.io/name: nginx
      app.kubernetes.io/version: v1
      version: v1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'true'
      labels:
        app: nginx
        app.kubernetes.io/name: nginx
        app.kubernetes.io/version: v1
        version: v1
    spec:
      containers:
        - image: 'nginx:alpine'
          imagePullPolicy: IfNotPresent
          name: nginx
          ports:
            - containerPort: 80
              name: http-80
              protocol: TCP
          env:
            - name: TZ
              value: Asia/Shanghai
          resources:
            limits:
              cpu: '500'
              memory: 512Mi
            requests:
              cpu: 20m
              memory: 32Mi
          livenessProbe:
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: nginx
  namespace: default
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      name: http
      number: 80
      protocol: HTTP
    hosts:
    - 'ng.test.com'
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: nginx-gw
  namespace: default
spec:
  hosts:
  - 'ng.test.com'
  gateways:
  - nginx
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: nginx
# ---
# apiVersion: networking.istio.io/v1beta1
# kind: VirtualService
# metadata:
#   labels:
#     app: nginx
#     app.kubernetes.io/name: nginx
#     app.kubernetes.io/version: v1
#     version: v1
#   name: nginx
#   namespace: default
# spec:
#   hosts:
#   - nginx
#   http:
#   - match:
#     - port: 80
#     route:
#     - destination:
#         host: nginx
#         port:
#           number: 80
#         subset: v1
#       weight: 87
#     - destination:
#         host: nginx
#         port:
#           number: 80
#         subset: v2
#       weight: 13
# ---
# apiVersion: networking.istio.io/v1alpha3
# kind: DestinationRule
# metadata:
#   labels:
#     app: nginx
#     app.kubernetes.io/name: nginx
#     app.kubernetes.io/version: v1
#     version: v1
#   name: nginx
#   namespace: default
# spec:
#   host: nginx
#   # trafficPolicy:
#   #   loadBalancer:
#   #     simple: LEAST_CONN
#   subsets:
#   - labels:
#       version: v1
#     name: v1
#   - labels:
#       version: v2
#     name: v2
